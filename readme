Learning Vue for work (CBS)

repo link: https://github.com/EOSandCHILL/VUE

This readMe will be used for taking notes and displaying my progress towards learning view

                      -----Vue Basics & Core Concepts-----

--Creating and Connecting Vue App Instances--

const app = Vue.createApp();

- creates a Vue app. we use {} inside of the Vue.createApp() to pass in an object we use this objeect to configure the app.

data:

- anything thats part of the object you return in data can now be used in your Vue controlled HTML part.

- data key wants a function as a value. we can use original functions or we can use shorthand functions. this function should do one simple and important thing which is returning an object. With this we can set up and key value pairs with any property names of your choice.

mount()

- lets vue know which part of the page should be controlled by that vue app. Enter the id of the selector you wish vue to use. We use id's because we want unique selectors. This tells vue that we want to connect our Vue.createApp() to a specific id.

--Interpolation and Data Binding--

Interpolation {{}}

- a special syntax that outputs data in the Vue controlled HTML part. Vue will scan the html code to detect certain features and syntax. You can reference your returned data object properties inside of the {{}}. Vue will make that connection and understand that you want to output the content stored inside of the {{}}

--Binding Attributes with the "v-bind" Directive--

- We dont always want to or can use string interpolation. if we want to add a link we cant put our string interpolation inside of a href. in order to do this we need to use Vue binding syntax. This allows us to use a vue directive which is instructions we add in our html code and we can use these directives on html elements like an anchor element for example.

- v-bind

v-bind is a directive and we use v-bind to give vue a set of instructions to do something. we use this to bind/set an attribute on an html element. we then tell v-bind what to bind by adding a : at the end and then adding the attribute after.

v-bind example:

<p>Learn more <a v-bind:href="vueLink">about Vue</a></p>

Tells Vue to find and set the value of the ref attribute to something which is passed in between the opening and closing double qoutes and in there you can reference a value of your data object which is vueLink in this example.

--Methods in Vue Apps--

Methods allow us to define functions which should execute when something happens. Methods takes an object which will be full of methods/functions. THEY MUST BE FUNCTIONS because they need to be callable as functions (original or shorthand functions).

--Working with Data inside of a Vue App--

instead of returning hardcoded strings we can output strings that are defined in data. in order to usae these strings we need to use the this keyword from our data and in our methods function.

--Outputting Raw HTML Content with v-html--

v-html is used to update a element's inner HTML with our data. it allows us to set the content between opening and closing text of an element but you now tell Vue that the content should be interpreted as HTML not text. We no longer have to use {{}} but instead the value you pass to v-html between the double qoutes would be courseGoalB. But this could cause a security issue because youre disregarding the cross side scripting attack protection that comes with using the {{}} (double curly braces)

--Understanding Event Binding--

--Events & Methods--

v-on allows us to react on a certain event just like onClick etc.

Although you can put your logic in html when using Vue it's always best practice to put your JS logic in JS, not html.

--Working with Event Arguments--

We can also use v-on with "event.target.value" JS feature. in order for your event to render first you can place $ infront of event.. $event..

--Using the Native Event Object--

using on submit can be done differently in vue. typically in vanilla JS when we submit something but want to prevent something from happeneing after we submit we use event.preventDefault() which wworks fine in Vue but we can also use this for wexample:

<form v-on:submit.prevent="signUp">

instead of

signUp() {
event.preventDefault();
alert("Submitted!");
}

--Locking Content with v-once--

The v-once directive is used to avoid unwanted re-renders of an element. It treats the element as a static content after rendering it once for the first time. This improves performance as it does not have to be rendered again.

--Data Binding + Event Binding = Two-Way Binding--

v-model is a shortcut for v-bind:value and v-on:input

--Introducing Computed Properties--

sometimes methods arent the best to use when outputting dynamically calculated values so we use Computed Properties instead for performance purposes. It essentially does the same thing as methods except it works in a more independent manner. Vue will be aware of their dependencies and only reexecute them if one of their dependencies changed. We can use Computed Properties like we use data and place them inside of {{}} unlike methods which can only be used inside of html tags.

--Working with Watchers--

Watchers are basically a function you can tell vue to execute when one of its dependencies change. we can actually use watchers instead of computed properties but it could work but it doesnt mean its the best option.

When using watcher(s) we repeat another data object and we also do not have to use the this keyword inside of the watch method because the original object is being watched and automatically updating the watched objects most recent changes.

A problem arises though when we have a computed property that would use more than one dependency

--v-bind and v-on Shorthands--

v-on shortcut is @ (use just the @ symbol for v-on and can still add modifiers)
v-bind shortcut is :

--Dynamic Styling with Inline Styles--

in view we can change the style of things on the page in reaction to clicks, user input, etc.

using vue we can set styles through css and css classes or inline styles by using the style attribute which is available on any html element

Although this is great its not recommended to use inline css styling

--Adding CSS Classes Dynamically--

Vue has a special syntax for adding css classes dynamically and styling them. we could create a class in css and then add it to our class in html like: :class="boxASelected ? 'demo active' : 'demo'"

or we can use:

class="demo"
:class="{active: boxASelected}"

--v-if, v-else and v-else-if--

v-if (if statement)

Conditionally render an element or a template fragment based on the truthy-ness of the expression value.

v-else (if else statement)

Does not expect expression

Can only be used on an element that comes directly after an element with v-if on it.
you CANNOT have another element inbetween.

v-else-if (if else statement)

Restriction: previous sibling element must have v-if or v-else-if.

v-show

Toggle the element's visibility based on the truthy-ness of the expression value.

Works by setting the display CSS property via inline styles, and will try to respect the initial display value when the element is visible. It also triggers transitions when its condition changes.

v-if vs v-show

v-if removes and adds elements to and from the DOM which really impacts which elements are apart of the DOM. v-show just hides and show items with CSS.

Which is best? Well showing and hiding w/ CSS means you dont have to add and remove elements all the time which is great because adding and removing elements can degrade your apps performance. But it also means you have a lot of elements in your DOM that arent needed at the moment which is also not ideal.

So whats the rule of thumb for v-if vs v-show?

You should only use v-if and only fallbacck to v-show if you have an element that has a visibility status that changes a lot like a toggle button or something similar.

--Rendering Lists of Data--

v-for

v-for helps output content that is repeated like lists of products etc.

Renders the element or template block multiple times based on the source data.

v-for expects: Arrays, Objects, numbers, strings, Iterable

<li v-for="goal in goals">Goal</li> explanation: we loop through an array with the "in" keyword when using v-for and now goal will hold every goal in goals for every iteration v-for foes for us. v-for will go through all the goals and give us access to every goal. This is useful because our goals are just strings and goals is just an array of strings.
Also we only have access to the goal inside of the element its in not outside of it.

--Diving Deeper Into v-for--

to get the index of a list we can use this syntax: <li v-for="(goal, index) in goals">{{ goal }} - {{ index }}</li>

we can also use v-for to loop through objects. Example:

      <ul>
        <li v-for="(value, key) in { name: 'Max', age: 31 }">
          {{ key }}: {{ value }}
        </li>
      </ul>

above we loop through a profile object and display the persons name and age

we can also llop through numbers. example:

      <ul>
        <li v-for="num in 10">{{ num }}</li>
      </ul>

--Removing List Items--

JS:
removeGoal(idx) {
this.goals.splice(idx, 1);
},

HTML:

<ul v-else>
<li v-for="(goal, index) in goals" @click="removeGoal(index)">
{{ goal }} - {{ index }}
</li>
</ul>

--Lists & Keys--

The key attribute

rule of thumb -- If youre using v-for add a key. key wants a unique identification criteria for every item it's outputting here. So we should bind it to a dynamic value with v-bind or just the : (colon) of course.

The key special attribute is used as a hint for Vue's virtual DOM algorithm to keep track of a node's identity. That way, Vue knows when it can reuse and patch existing nodes and when it needs to reorder or recreate them.

keys are no longer necessary on v-if/v-else/v-else-if branches, since Vue now automatically generates unique keys.

Once the key is used we will noticed that the data thats been entered is no longer lost when array index #s shift. This happens because Vue is now able to tell the different DOM elements apart and detect that the first DOM element now needs to be removed in order to not lose any data attached to the second element.

"key" summary: you should add a "key" with a unique identification criteria when using v-for. It should be added to help Vue tell the different elements apart and make sure that state such as entered values does not get lost.

--Vue refs--

ref is a special attribute, similar to the key attribute discussed in the v-for chapter. It allows us to obtain a direct reference to a specific DOM element or child component instance after it's mounted. This may be useful when you want to, for example, programmatically focus an input on component mount, or initialize a 3rd party library on an element.

--Vue App Lifecycle - Theory--
link: https://vuejs.org/api/options-lifecycle.html

0.  createApp({...})

1.  beforeCreate() - before the app has been fully initialized

2.  created() - Called after the instance has finished processing all state-related options.

3.  compile template - where all of the dynamic placeholders, interpolations and etc are removed and replaced with concrete values that should be shown to the user

4.  beforeMount() - Called right before the component is to be mounted. happens right before Vue actually brings something on to the screen.

5.  mounted() - something is now seen on the screen

6.  Mounted Vue Instance

7.  Data changed

8.  beforeUpdate() - Called right before the component is about to update its DOM tree due to a reactive state change.

9.  updated() - Called after the component has updated its DOM tree due to a reactive state change.

10. beforeUnmount() - called right before a component instance is to be unmounted.

11. unmounted() - Called after the component has been unmounted.

12. errorCaptured() - Called when an error propagating from a descendant component has been captured.

                            -----Vue Components-----

We can create a component by creating an app likie usual and calling the component method on it. this tells vue that we want to create a new component. for the first argument always use a '-' when naming youre compenent to avoid the name clashing with other names in html. lets remember that a Vue component is just another Vue app the only difference is that it belongs to another app so in the second argument we will create an app inside of our component. Components allow devs to easily replicate an encapsulated piece of HTML code with attached data and logic.

--"Props" (Parent => Child Communication)--

props is short for properties and we should think of props as custome html attributes. we can use props to pass in data and we do this by making vue aware of the props that we want to accept on our component. we can do this by going into our component file and aading a specific new key unders export default and create "props: []". once its created we shouldf pass in all of the attributes we want to accept on this component and we add them as strings.

Once we enter prop names into the array we can treat the props like daya properties and add them into {{ propName }}.

--Prop Behavior & Changing Props--

We also use props for parent child communication! The parent component or main app in our case communicates to its child html element/child component which is the <friend-contact> component. The <friend-contact> component is a child of the App because its being used in the template of the app and the App would be the parent.

Props should not be mutated. Whaat does this mean? the data passed into <friend-contact> should only be changed in App not in <friend-contact>. this is called a unidirectional data flow.

--Validating Props--

we can take the array where we defined our props and turn it into an object that can require certain values. Example:

},
currentOccupation: {
type: String,
required: true,
},
currentSkills: {
type: String,
required: false,
default: "N/A",
}

--Working with Dynamic Prop Values--

props can be more than strings anbd they can be binded to dynamic values.

--Emitting Custom Events (Child => Parent Communication)--

$emit() is a built in method that can be called from inside a vue component under this keyword. This allows the emitting of custom events that can be listened to from inside the parent component. emit() wants atleast one argument which is typically the name of the custom event. we can listen to these custom events just as we do with the clicking of buttons.

every argument thats passed after the first is simply data that you pass together with your event

In app.vue we point at the toggleFavoriteStatus method on our own event and the toggleFavoriteStatus method will now recieve this friend ID

--Defining & Validating Custom Events--

emits is the counterpart to props. In props you define which props the component recieves and in emit youll define which custom events your component will eventually emit. This is done to document your component so other developers know how your component works and to which events they can listen.

props send data into a component and events send data out of a component

-------components summary---------

Component Communication Overview:

1.components are used to build UIs by combining them
2.components build "parent-child" relations and use "unidirectional data flows" for communication

Props overview (parent => child):

1."Props" are used to pass data from a parent to a child component
2.Props should be defined in advance, possibly in great detail (type, required etc)

Custom Events Overview (child => parent):

1."Custom Events" are emitted (via $emit) to trigger a method in a parent component
2.Custom events can carry data which can be used in a called method

Provide Inject Overview:

1.If data needs to be passed across multiple components ("pass through"), you can use provide/inject
2.Provide data in a parent component, inject into a child component
3.Do not use provide eject to replace the use of custom events and props

--vuejs local vs global components--

A global component is a component that can be used anywhere in an application, including within other components. On the other hand, a local component is a component that is not registered globally, and can therefore only be used on components where it is registered.

--vue styling--

doesnt matter where you add your styling it will always be treated as global styling. If we want to not utilize styling globally we need to use scoped styling.

--vue slots--

we can use a component as a wrapper around dynamic content. a great example its the card style in web development where we have a border and a shadow that surrounds content making it look like a digital card. we can use slots to wrap content inside of a card component. we use the slots tags around html content. slots allow us to receive HTML content that may be using vue features from outside of the component. slots are like props but props are for data and slots are for HTML code for the template code a component needs.

--component deep dive summary--

component registration and styles:

components can be registered globally or locally: prefer local registration
styles can be global or scoped to a component: prefer scoped for most components

slots:

slots can be used to add a "placeholder" for dynamic html code
multiple named slots are possible, default fallbacks can be provided, scoped slots allow advanced use cases.

dynamic components:

components can be swapped dynamically via the built in "component" component.
component caching can be added via the "keep alive" component

teleport and styles guide:

DOM structure can be mnanipulated via teleport it keeps the component hierarchy
consider following the official style guide to keep your code clean and understandable.

--Forms--
