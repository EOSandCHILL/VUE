Learning Vue for work (CBS)

repo link: https://github.com/EOSandCHILL/VUE

This readMe will be used for taking notes and displaying my progress towards learning view

-----Vue Basics & Core Concepts-----

--Creating and Connecting Vue App Instances--

const app = Vue.createApp();

- creates a Vue app. we use {} inside of the Vue.createApp() to pass in an object we use this objeect to configure the app.

data:

- anything thats part of the object you return in data can now be used in your Vue controlled HTML part.

- data key wants a function as a value. we can use original functions or we can use shorthand functions. this function should do one simple and important thing which is returning an object. With this we can set up and key value pairs with any property names of your choice.

mount()

- lets vue know which part of the page should be controlled by that vue app. Enter the id of the selector you wish vue to use. We use id's because we want unique selectors. This tells vue that we want to connect our Vue.createApp() to a specific id.

--Interpolation and Data Binding--

Interpolation {{}}

- a special syntax that outputs data in the Vue controlled HTML part. Vue will scan the html code to detect certain features and syntax. You can reference your returned data object properties inside of the {{}}. Vue will make that connection and understand that you want to output the content stored inside of the {{}}

--Binding Attributes with the "v-bind" Directive--

- We dont always want to or can use string interpolation. if we want to add a link we cant put our string interpolation inside of a href. in order to do this we need to use Vue binding syntax. This allows us to use a vue directive which is instructions we add in our html code and we can use these directives on html elements like an anchor element for example.

- v-bind

v-bind is a directive and we use v-bind to give vue a set of instructions to do something. we use this to bind/set an attribute on an html element. we then tell v-bind what to bind by adding a : at the end and then adding the attribute after.

v-bind example:

<p>Learn more <a v-bind:href="vueLink">about Vue</a></p>

Tells Vue to find and set the value of the ref attribute to something which is passed in between the opening and closing double qoutes and in there you can reference a value of your data object which is vueLink in this example.

--Methods in Vue Apps--

Methods allow us to define functions which should execute when something happens. Methods takes an object which will be full of methods/functions. THEY MUST BE FUNCTIONS because they need to be callable as functions (original or shorthand functions).

--Working with Data inside of a Vue App--

instead of returning hardcoded strings we can output strings that are defined in data. in order to usae these strings we need to use the this keyword from our data and in our methods function.

--Outputting Raw HTML Content with v-html--

v-html is used to update a element's inner HTML with our data. it allows us to set the content between opening and closing text of an element but you now tell Vue that the content should be interpreted as HTML not text. We no longer have to use {{}} but instead the value you pass to v-html between the double qoutes would be courseGoalB. But this could cause a security issue because youre disregarding the cross side scripting attack protection that comes with using the {{}} (double curly braces)

--Understanding Event Binding--

--Events & Methods--

v-on allows us to react on a certain event just like onClick etc.

Although you can put your logic in html when using Vue it's always best practice to put your JS logic in JS, not html.

--Working with Event Arguments--

We can also use v-on with "event.target.value" JS feature. in order for your event to render first you can place $ infront of event.. $event..

--Using the Native Event Object--

using on submit can be done differently in vue. typically in vanilla JS when we submit something but want to prevent something from happeneing after we submit we use event.preventDefault() which wworks fine in Vue but we can also use this for wexample:

<form v-on:submit.prevent="signUp">

instead of

signUp() {
event.preventDefault();
alert("Submitted!");
}

--Locking Content with v-once--

The v-once directive is used to avoid unwanted re-renders of an element. It treats the element as a static content after rendering it once for the first time. This improves performance as it does not have to be rendered again.

--Data Binding + Event Binding = Two-Way Binding--

v-model is a shortcut for v-bind:value and v-on:input

--Introducing Computed Properties--

sometimes methods arent the best to use when outputting dynamically calculated values so we use Computed Properties instead for performance purposes. It essentially does the same thing as methods except it works in a more independent manner. Vue will be aware of their dependencies and only reexecute them if one of their dependencies changed. We can use Computed Properties like we use data and place them inside of {{}} unlike methods which can only be used inside of html tags.

--Working with Watchers--

Watchers are basically a function you can tell vue to execute when one of its dependencies change. we can actually use watchers instead of computed properties but it could work but it doesnt mean its the best option.

When using watcher(s) we repeat another data object and we also do not have to use the this keyword inside of the watch method because the original object is being watched and automatically updating the watched objects most recent changes.

A problem arises though when we have a computed property that would use more than one dependency

--v-bind and v-on Shorthands--

v-on shortcut is @ (use just the @ symbol for v-on and can still add modifiers)
v-bind shortcut is :

--Dynamic Styling with Inline Styles--

in view we can change the style of things on the page in reaction to clicks, user input, etc.

using vue we can set styles through css and css classes or inline styles by using the style attribute which is available on any html element

Although this is great its not recommended to use inline css styling

--Adding CSS Classes Dynamically--

Vue has a special syntax for adding css classes dynamically and styling them. we could create a class in css and then add it to our class in html like: :class="boxASelected ? 'demo active' : 'demo'"

or we can use:

class="demo"
:class="{active: boxASelected}"
